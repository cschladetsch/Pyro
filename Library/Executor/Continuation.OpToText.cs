namespace Pyro.Exec
{
    public partial class Continuation
    {
        private static string OpToText(EOperation op)
        {
            switch (op)
            {
            case EOperation.Nop:
                return "nop";
            case EOperation.HasType:
                return "hastype";
            case EOperation.GarbageCollect:
                return "garbage_collect";
            case EOperation.Plus:
                return "+";
            case EOperation.Minus:
                return "-";
            case EOperation.Multiply:
                return "*";
            case EOperation.Divide:
                return "div";
            case EOperation.Modulo:
                return "mod";
            case EOperation.Store:
                return "#";
            case EOperation.Has:
                return "has";
            case EOperation.Retrieve:
                return "@";
            case EOperation.Assign:
                return "#";
            case EOperation.GetPath:
                return "@@";
            case EOperation.Suspend:
                return "&";
            case EOperation.Resume:
                return "...";
            case EOperation.Replace:
                return "!";
            case EOperation.Assert:
                return "assert";
            case EOperation.Write:
                return "write";
            case EOperation.WriteLine:
                return "writeln";
            case EOperation.If:
                return "if";
            case EOperation.IfElse:
                return "ife";
            case EOperation.StackToList:
                return "stacktolist";
            case EOperation.ListToStack:
                return "listtostack";
            case EOperation.Depth:
                return "depth";
            case EOperation.Dup:
                return "dup";
            case EOperation.Clear:
                return "clear";
            case EOperation.Swap:
                return "swap";
            case EOperation.Break:
                return "break";
            case EOperation.Rot:
                return "rot";
            case EOperation.Roll:
                return "roll";
            case EOperation.RotN:
                return "rotn";
            case EOperation.RollN:
                return "rolln";
            case EOperation.Pick:
                return "pick";
            case EOperation.Over:
                return "over";
            case EOperation.Freeze:
                return "freeze";
            case EOperation.Thaw:
                return "thaw";
            case EOperation.FreezeText:
                return "freezet";
            case EOperation.ThawText:
                return "thawt";
            case EOperation.FreezeYaml:
                return "freezey";
            case EOperation.ThawYaml:
                return "thawy";
            case EOperation.Not:
                return "!";
            case EOperation.Equiv:
                return "==";
            case EOperation.LogicalAnd:
                return "&&";
            case EOperation.LogicalOr:
                return "||";
            case EOperation.LogicalXor:
                return "^";
            case EOperation.Less:
                return "<";
            case EOperation.Greater:
                return ">";
            case EOperation.GreaterOrEquiv:
                return ">=";
            case EOperation.LessOrEquiv:
                return "<=";
            case EOperation.NotEquiv:
                return "!=";
            case EOperation.Expand:
                return "expand";
            case EOperation.ToArray:
                return "toarray";
            case EOperation.ToList:
                return "tolist";
            case EOperation.ToMap:
                return "tomap";
            case EOperation.ToSet:
                return "toset";
            case EOperation.ToPair:
                return "topair";
            case EOperation.Size:
                return "size";
            case EOperation.GetBack:
                return "back";
            case EOperation.PushBack:
                return "push_back";
            case EOperation.PushFront:
                return "push_front";
            case EOperation.Remove:
                return "remove";
            case EOperation.Insert:
                return "insert";
            case EOperation.New:
                return "new";
            case EOperation.At:
                return "at";
            case EOperation.DebugPrintDataStack:
                return "debug_print_data";
            case EOperation.DebugPrintContextStack:
                return "debug_print_context";
            case EOperation.DebugPrint:
                return "debug_print";
            case EOperation.DebugPrintContinuation:
                return "debug_print_cont";
            case EOperation.DebugSetLevel:
                return "set_debug_level";
            case EOperation.SetFloatPrecision:
                return "set_float_precision";
            case EOperation.Self:
                return "self";
            case EOperation.GetMember:
                return ".@";
            case EOperation.SetMember:
                return "set_member";
            case EOperation.SetMemberValue:
                return "set_member_value";
            case EOperation.ForEachIn:
                return "for_each";
            case EOperation.ForLoop:
                return "for";
            case EOperation.Drop:
                return "drop";
            case EOperation.DropN:
                return "dropn";
            }

            return $"`{(int) op}";
        }
    }
}

