using Flow;
using Pyro;
using Pyro.Network;
using System.Collections.Generic;
//================================================================

namespace Foo.Agent {
    public partial class BarAgent<TBarProxy> {
        protected List<TBarProxy> _Proxies = new List<TBarProxy>();
    }
}

namespace Foo.Proxy {
    public partial class BarProxy {
        public BarProxy(NetId sourceNetId, IRef<BarProxy> obj) : base(sourceNetId, obj) {
        }
    }
}

namespace Foo.Agent {
    public interface IAgentCommon {
    }

    public interface IAgentBase<IAgent>
        : IAgentCommon {

    }
}

//----------------------------------------------------

/// <summary>
/// Many subscribers can subscribe to the one network event.
/// </summary>
public class NetworkEvent<NetworkEventHandler> {
    private List<INetworkEntity> _subscribers;

}

namespace Foo.Agent.Impl {

    public interface IBarAgent
        : IAgentBase<IBarAgent> {

    }
    public partial class BarAgent
        : AgentBase<BarAgent> { 

        public delegate void BarAgentSomeEventHandler(int num, string str);
        NetworkEvent<BarAgentSomeEventHandler> SomeEvent;

        public BarAgent(NetId sourceNetId, IRef<BarAgent> obj) : base(sourceNetId, obj) {
        }

        string Name { get; }
        float Age {  set; get; }

        int Sum(int a, int b) {
            return a + b;
        }

        Null Call() {
            return default;
        }
    }
}

namespace Foo.Proxy {
    using Foo.Agent.Impl;

    public partial class BarProxy
        : ProxyBase<BarProxy> {

        public delegate void BarProxySomeEventHandler(IBarAgent sender, int num, string str);
        event BarProxySomeEventHandler SomeEvent;

        /// <summary>
        /// Can have many proxies to one Agent.
        /// </summary>
        IBarAgent _agent;

        IFuture<string> Name { get; }
        IFuture<float> Age {  set; get; }

        IFuture<int> Sum(int a, int b) {
            return null;
        }

        IFuture<Null> Call() {
            return null;
        }
    }
}

