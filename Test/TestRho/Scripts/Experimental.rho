// random ideas

// not implemented
//fun test_lambdas()
    //a = () => 1
    //b = (x,y) => x + y
    //assert(a() == 1)
    //assert(b(a(), 2) == 3)

fun infinite_mutual_recurse()
    count = 10000
    fun foo(n)
        if (n < count)
            bar!(n + 1)
        n
    fun bar(n)
        if (n < count)
            foo!(n + 1)
        n
    // mutual recurse N times without using stack
    assert(foo(bar, 0) == count)    

fun embed_pi()
    a = `{ 1 2 + }`     // a is a coroutine
    assert(a() == 3)    // invoke it with (), which is like a subroutine call. invoke with !() to replace current context instead
    fun spam(x,y)
        x*y
    b = `{ 2 3 spam & }`()    // invoke coro defined in rho from pi
    assert(b == 6)
    c = `{ 'a # 'b # a b - }` // pull args off stack
    assert(c(2,3) == -1)

fun tests()
    test_lambdas()
    infinite_mutual_recurse()
    embed_pi()

